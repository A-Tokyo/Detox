import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

apply plugin: 'com.facebook.react'

react {
    reactRoot = rootProject.file("../node_modules/react-native/")
    codegenDir = rootProject.file("../node_modules/react-native-codegen/")
}

apply from: '../rninfo.gradle'

//project.ext.react = [:]
project.ext.react = [
    enableHermes: rnInfo.isRN60OrHigher
]
apply from: '../../node_modules/react-native/react.gradle'


android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId 'com.wix.detox.test'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName '1.0'
        buildConfigField 'boolean', 'IS_NEW_ARCHITECTURE_ENABLED', isNewArchitectureEnabled().toString()

        ndk {
            abiFilters (*reactNativeArchitectures())
        }
        testBuildType System.getProperty('testBuildType', 'debug')
        testInstrumentationRunner 'com.example.DetoxTestAppJUnitRunner'

        /*
        testInstrumentationRunnerArguments = [
                'detoxServer': 'ws://localhost:8099',
                'detoxSessionId': 'test'
        ]
        */

        missingDimensionStrategy 'detox', 'full'
    }

    splits {
        abi {
            reset()
            enable false
            universalApk false  // If true, also generate a universal APK
            include (*reactNativeArchitectures())
        }
    }
    signingConfigs {
        release {
            storeFile file("keystore.jks")
            storePassword "12345678"
            keyAlias "key0"
            keyPassword "12345678"
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', "${project(':detox').projectDir}/proguard-rules-app.pro"

            signingConfig signingConfigs.release
        }
    }
    packagingOptions {
        pickFirst '**/libc++_shared.so'

        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

if (isNewArchitectureEnabled()) {
    android {
        defaultConfig {
            // We configure the NDK build only if you decide to opt-in for the New Architecture.
            externalNativeBuild {
                ndkBuild {
                    arguments "APP_PLATFORM=android-21",
                            "APP_STL=c++_shared",
                            "NDK_TOOLCHAIN_VERSION=clang",
                            "GENERATED_SRC_DIR=$buildDir/generated/source",
                            "PROJECT_BUILD_DIR=$buildDir",
                            "REACT_ANDROID_DIR=$rootDir/../node_modules/react-native/ReactAndroid",
                            "REACT_ANDROID_BUILD_DIR=$rootDir/../node_modules/react-native/ReactAndroid/build"
                    cFlags "-Wall", "-Werror", "-fexceptions", "-frtti", "-DWITH_INSPECTOR=1"
                    cppFlags "-std=c++17"
                    // Make sure this target name is the same you specify inside the
                    // src/main/jni/Android.mk file for the `LOCAL_MODULE` variable.
                    targets "rndiffapp_appmodules"
                    // Fix for windows limit on number of character in file paths and in command lines
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        arguments "NDK_APP_SHORT_COMMANDS=true"
                    }

                }
            }

//            if (!enableSeparateBuildPerCPUArchitecture) {
//                ndk {
//                    abiFilters (*reactNativeArchitectures())
//                }
//            }
        }

        // Apply the additional C-make script that makes RN's new architecture work
        externalNativeBuild {
            ndkBuild {
                path "$projectDir/src/main/jni/Android.mk"
            }
        }

        def reactAndroidProjectDir = project(':ReactAndroid').projectDir
        println "ZXCZXC $reactAndroidProjectDir"
        def packageReactNdkDebugLibs = tasks.register('packageReactNdkDebugLibs', Copy) {
            dependsOn(':ReactAndroid:packageReactNdkDebugLibsForBuck')
            from("$reactAndroidProjectDir/src/main/jni/prebuilt/lib")
            into("$buildDir/react-ndk/exported")
        }
        def packageReactNdkReleaseLibs = tasks.register('packageReactNdkReleaseLibs', Copy) {
            dependsOn(':ReactAndroid:packageReactNdkReleaseLibsForBuck')
            from("$reactAndroidProjectDir/src/main/jni/prebuilt/lib")
            into("$buildDir/react-ndk/exported")
        }
        afterEvaluate {
            // If you wish to add a custom TurboModule or component locally,
            // you should uncomment this line.
            // preBuild.dependsOn("generateCodegenArtifactsFromSchema")
            preDebugBuild.dependsOn(packageReactNdkDebugLibs)
            preReleaseBuild.dependsOn(packageReactNdkReleaseLibs)
            // Due to a bug inside AGP, we have to explicitly set a dependency
            // between configureNdkBuild* tasks and the preBuild tasks.
            // This can be removed once this is solved: https://issuetracker.google.com/issues/207403732
            configureNdkBuildRelease.dependsOn(preReleaseBuild)
            configureNdkBuildDebug.dependsOn(preDebugBuild)

            reactNativeArchitectures().each { architecture ->
                println "ASDASD - configureNdkBuildDebug[${architecture}]"
                println tasks.findByName("configureNdkBuildDebug[${architecture}]")

                tasks.findByName("configureNdkBuildDebug[${architecture}]")?.configure {
                    dependsOn('preDebugBuild')
                }
                tasks.findByName("configureNdkBuildRelease[${architecture}]")?.configure {
                    dependsOn('preReleaseBuild')
                }
            }
        }

    }

    // Apparently for the new architecture RN needs to be force-built from source (rather than
    // using the prebuilt binary). That actually makes sense in case there's native turbo-module
    // code that needs to be compiled.
    configurations.all {
        resolutionStrategy.dependencySubstitution {
            substitute(module('com.facebook.react:react-native'))
                    .using(project(':ReactAndroid')).because("On New Architecture we're building React Native from source")
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation project(path: ':@react-native-community_slider')

    implementation project(path: ':ReactAndroid')

    implementation project(':AsyncStorage')
    implementation project(':react-native-webview')
    implementation project(':react-native-community-checkbox')
    implementation project(':react-native-community-geolocation')

    androidTestImplementation(project(path: ':detox'))
    androidTestImplementation 'com.linkedin.testbutler:test-butler-library:2.2.1'
}

if (rnInfo.isRN60OrHigher) {
    // refs: https://react-native-community.github.io/upgrade-helper/?from=0.59.9&to=0.60.6
    //       https://react-native-community.github.io/upgrade-helper/?from=0.60.6&to=0.61.4
    dependencies {
        def enableHermes = project.ext.react.get('enableHermes', false)
        if (enableHermes) {
            def hermesModuleName = rnInfo.isRN61OrHigher ? 'hermes-engine' : 'hermesvm'
            def hermesPath = "../../node_modules/$hermesModuleName/android/"
            debugImplementation files(hermesPath + 'hermes-debug.aar')
            releaseImplementation files(hermesPath + 'hermes-release.aar')
        } else {
            implementation 'org.webkit:android-jsc:+'
        }
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.implementation
  into 'libs'
}

/**
 * Architectures to build native code for.
 */
def reactNativeArchitectures() {
    def defaultArchitectures = ['armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64']

    def architectures = project.getProperties().get('reactNativeArchitectures')
    return architectures ? architectures.split(",") : defaultArchitectures
}

def isNewArchitectureEnabled() {
    // To opt-in for the New Architecture, you can either:
    // - Set `newArchEnabled` to true inside the `gradle.properties` file
    // - Invoke gradle with `-newArchEnabled=true`
    // - Set an environment variable `ORG_GRADLE_PROJECT_newArchEnabled=true`
    return project.hasProperty('newArchEnabled') && project.newArchEnabled == 'true'
}
